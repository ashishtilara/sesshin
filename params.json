{"name":"Sesshin","tagline":"PHP advanced session manager.","body":"# Sesshin\r\n\r\nObject-oriented, extendable advanced session handling component written with\r\nsecurity in mind that mitigates attacks like Session Hijacking, Session Fixation,\r\nSession Exposure, Sesion Poisoning, Session Prediction.\r\n\r\nFeatures:\r\n\r\n* smart session expiry control\r\n* prevents session adoption, i.e. session ids generated only by the component\r\n  are acceptable (strict model)\r\n* sends cookie only when session really created\r\n* session id rotation (anti session hijacking), based on time and/or number of\r\n  requests\r\n* support for user-defined storage\r\n* support for user-defined listeners (observers) \r\n* support for user-defined entropy callback\r\n* support for own fingerprint generators, e.g. user agent,\r\n* unlike PHP native mechanism, you don't have to use cron or resourse-consuming\r\n  100% garbage collecting probability to ensure sessions are removed exactly\r\n  after specified time\r\n* convention over configuration (has defined default listener, storage, entropy \r\n  generator, fingerprint generator and ID storage)\r\n* 100% independent from insecure native PHP session extension\r\n* and some more...\r\n\r\n## Requirements\r\n\r\n* PHP 5.3\r\n\r\n## Usage\r\n\r\n### Initialization\r\n\r\n```php\r\nrequire_once __DIR__.'/src/Sesshin/ClassLoader/ClassLoader.php';\r\n\r\nuse Sesshin\\ClassLoader\\ClassLoader;\r\nuse Sesshin\\Session\\Session;\r\n\r\n$loader = new ClassLoader();\r\n$loader->register();\r\n\r\n$session = new Session();\r\n```\r\n\r\n### Create new session\r\n\r\nOnly when `create()` called, session cookie is created (for native PHP session\r\nhandler cookie is present all the time whether it's needed or not).\r\n\r\n```php\r\n$session->create();\r\n```\r\n\r\n### Open existing session\r\n\r\nIf session was not created earlier, session is not opened and `false` is returned.\r\n\r\n```php\r\n$session->open();\r\n```\r\n\r\nIf you want to create new session if it does not exist already, just pass `true`\r\nas argument. It will call `create()` transparently.\r\n\r\n```php\r\n$session->open(true);\r\n```\r\n\r\n### Regenerate session id\r\n\r\n```php\r\n// auto-regenerate after specified time (secs)\r\n$session->setIdTtl(300);\r\n\r\n// auto-regenerate after specified number of requests\r\n$session->setIdRequestsLimit(10);\r\n\r\n// manually\r\n$session->regenerateId();\r\n```\r\n\r\n### Observe (listen) special events\r\n\r\n```php\r\n$listener = $session->getListener();\r\n\r\n$listener->bind(Session::EVENT_NO_DATA_OR_EXPIRED, function($event, $session){\r\n  die('Session expired or session adoption attack!');\r\n});\r\n$listener->bind(Session::EVENT_NO_DATA_OR_EXPIRED, function($event, $session){\r\n  die(sprintf('Session %s expired!', $session->getId()));\r\n});\r\n$listener->bind(Session::EVENT_INVALID_FINGERPRINT, function($event, $session){\r\n  die('Invalid fingerprint, possible attack!');\r\n});\r\n```\r\n\r\n### User session\r\n\r\n```php\r\nuse Sesshin\\Session\\User;\r\n\r\n$user_session = new User();\r\n\r\n$user_session->create();\r\n$user_session->login(1);\r\n\r\nif ($user_session->isLogged()) {\r\n  $user = UserRepository::find($user_session->getUserId());\r\n  echo sprintf('User %s is logged', $user->getUsername());\r\n}\r\n```\r\n\r\n### Change storage\r\n\r\n```php\r\nuse Sesshin\\Storage\\Memcache;\r\n\r\n$session->setStorage(new Memcache($memcache_driver));\r\n```\r\n\r\n### Change entropy algorithm\r\n\r\nEntropy is used to generate session id.\r\n\r\n```php\r\n$session->getIdHandler()->setEntropyGenerator(new MyFancyEntropyGenerator());\r\n```\r\n\r\n`MyFancyEntropyGenerator` must implement `Sesshin\\EntropyGenerator\\EntropyGeneratorInterface`.\r\n\r\n### Change session ID storage\r\n\r\nBy default session ID is stored in cookie, but sometimes you may need to force\r\nsession id, eg. based on some token, query string var, etc.\r\n\r\n```php\r\n$session->getIdHandler()->setIdStorage(new MyFancyIdStorage());\r\n```\r\n\r\n`MyFancyIdStorage` must implement `Sesshin\\Id\\Storage\\StorageInterface`.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}